openapi: 3.0.3
info:
  version: 1.0.0
  title: Consumer Control API
  description: |
    Use this API to start and stop consumers that have linked with this
      API to control their start and stop behavior.  
      
      The following operations can be done with this API:
      1. Get current status of a consumer by name
      2. Register a new consumer
      3. Instruct a consumer to stop
      4. Instruct a consumer to start / restart
tags:
  - name: Single Process
    description: Operations related to a single process
  - name: Complex
    description: Operations to handle multiple processes
paths:
  /process:
    get:
      tags:
        - Single Process
      summary: Get consumer status
      description: |
        Get all details of a consumer by name  
        If a process that has never been registered with this API 
        before is queried, only the name and run is returned with the run
        value set to true.
      operationId: getConsumer
      parameters: 
        - name: process_name
          in: query
          schema:
            type: string
          required: true
      responses:
        '200':
          description: The details of a Process
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessDetail'
              examples:
                predefined-process:
                  summary: Predefined process
                  value:
                    name: "Process1"
                    run: true
                    tags: ["DMI", "V4"]
                    effective: "2024-03-01T12:00:00"
                undefined-process:
                  summary: Undefined process
                  value:
                    name: "ProcessX"
                    run: true
    post:
      tags:
          - Single Process
      summary: Register a new process
      description: Register a new process in the API
      operationId: addConsumer
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/ProcessDetail'
            examples:
              create-process-request:
                summary: Request
                value:
                  name: "Process1"
                  run: true
                  tags: ["DMI", "V4"]
      responses: 
        '201':
          description: Process registered successfully
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/ProcessDetail'
              examples:
                created-process:
                  summary: Created process
                  value:
                    name: "Process1"
                    run: true
                    tags: ["DMI", "V4"]
                    effective: "2024-03-01T12:00:00"
        '500':
          description: Process already exists or other error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
              example:
                code: 500
                message: Failed to add process":"" Process processf alread exists
    put:
      tags:
          - Single Process
      summary: Update an existing process
      description: Update an existing process in the API
      operationId: updateConsumer
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/ProcessDetail'
            examples:
              create-process-request:
                summary: Request
                value:
                  name: "processf"
                  run: true
                  tags: ["DMI", "V4"]
      responses: 
        '202':
          description: Process updated successfully
        '500':
          description: Process does not exist or other error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
              example:
                code: 500
                message: Failed to update process":"" Process with name processf does not exist
    delete:
      tags:
          - Single Process
      summary: Delete an existing process
      description: Delete an existing process in the API
      operationId: deleteConsumer
      parameters: 
        - name: process_name
          in: query
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Process deleted successfully
        '500':
          description: Process does not exist or other error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
              example:
                code: 500
                message: Failed to delete process":"" Process with name processf does not exist
    patch:
      tags:
          - Single Process
      summary: Update an existing process (partial)
      description: | 
        Update an existing process in the API (partial)  
        ***One*** of `run` or `tags` must be specified along with `name`
      operationId: patchConsumer
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/ProcessDetailPatch'
            examples: 
              with-run:
                summary: With run only
                value:
                  name: processx
                  run: true
              with-tags:
                summary: With tags only
                value:
                  name: processx
                  tags:
                    - Postgresql
                    - Analytics
              with-run-tags:
                summary: With run and tags
                value:
                  name: processx
                  run: true
                  tags:
                    - Postgresql
                    - Analyics
      responses: 
        '202':
          description: Process updated successfully
        '500':
          description: Process does not exist or other error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
              example:
                code: 500
                message: Failed to update process":"" Process with name processx does not exist
  /processes:
    get:
      tags:
        - Complex
      summary: Query Processes by multiple parameters
      description: |
        Get all details of a consumer by multiple parameters  
        1. Tags
        2. Process Name Prefix
        3. Run (true or false)
      operationId: getConsumers
      parameters: 
        - name: tags[]
          in: query
          description: Tags
          required: false
          schema:
            type: array
            items:
              type: string
          style: form
          explode: true
          example:
            - es
            - dmi    
        - name: name_prefixes[]
          in: query
          description: Perfix of names
          required: false
          schema:
            type: array
            items:
              type: string
          style: form
          explode: true
          example:
            - process1
        - name: run
          in: query
          description: Run status (true/false)
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: The details of a Process
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProcessDetail'
              examples:
                processes:
                  summary: Processes
                  value:
                    - name: "process1"
                      run: true
                      tags: ["dmi", "v4"]
                      effective: "2024-03-01T12:00:00"
                    - name: "process2"
                      run: true
                      tags: ["md", "v4", "es"]
                      effective: "2024-03-01T12:00:00"
    put:
      tags:
        - Complex
      summary: Add/Update multiple processes
      description: |
        Accepts an array or ProcessDetailPatch objects. If the Process
        already exists in the database, it is updated. Otherwise, it is
        added to the database.  
        For addition, if run is not specified, it is interpreted as false.
      operationId: putConsumers
      requestBody: 
        content: 
          application/json: 
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ProcessDetailPatch'
            examples:
              example1:
                summary: Example 1
                value:
                  - name: process1
                  - name: process2
                    tags:
                      - es
                      - md
                  - name: process3
                    run: true
                  - name: process4
                    run: false
                    tags:
                      - postgresql
      responses:
        '200':
          description: Processes saved successfully
          content:
            application/json: 
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProcessMessage'
              examples:
                example-1:
                  summary: Example
                  value:
                    - name: process1
                      action: Updated
                    - name: process3
                      action: Added
                    - name: process4
                      action: Added
        '400':
          description: Could not save processes due to errors in data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessError'
              examples:
                error-1:
                  summary: Sample error
                  value:
                    name: process1
                    error_message: Processes could not be saved because of ...
  /processes/{action}:
    patch:
      tags:
        - Complex
      summary: Start or stop processes (consumers)
      description: |
        Start or stop processes by specifying:  
        1. Tags
        2. Process Name wildracrs
      operationId: startStopConsumers
      parameters: 
        - name: action
          description: Specify start or stop
          in: path
          required: true
          schema:
            type: string
          examples:
            start:
              summary: Start
              value: start
            stop:
              summary: Stop
              value: stop
      requestBody: 
        content: 
          application/json: 
            schema:
              $ref: '#/components/schemas/ProcessQuery'
            examples:
              name-match:
                summary: Match by name
                value:
                  name_patterns: 
                    - process*
              tag-match:
                summary: Match by tags
                value: 
                  tags:
                    - v4
                    - dmi
              name-tag-match:
                summary: Match by name and tags
                value:
                  name_patterns: 
                    - process*
                  tags:
                    - v4
                    - dmi
      responses:
        '200':
          description: Processes started / stopped successfully
          content:
            application/json: 
              schema: 
                type: array
                items: 
                  $ref: '#/components/schemas/ProcessDetail'
components:
  schemas: 
    ProcessDetail:
      type: object
      properties: 
        name:
          type: string
        run: 
          type: boolean
        tags:
          type: array
          items: 
            type: string
        effective:
          type: string
          format: date-time
          readOnly: true
      required: 
        - name
        - run
    ProcessQuery:
        anyOf:
          - type: object
            properties:
              name_patterns:
                type: array
                items:
                  type: string
          - type: object
            properties:
              tags:
                type: array
                items: 
                  type: string
    ProcessDetailPatch:
      allOf:
        - type: object
          properties: 
            name:
              type: string
          required: 
            - name
        - anyOf:
            - type: object
              properties:
                run: 
                  type: boolean
              required: 
                - run
            - type: object
              properties:
                tags:
                  type: array
                  items: 
                    type: string
    ProcessError:
      type: object
      properties:
        name:
          type: string
        error_message:
          type: string
    ProcessMessage:
      type: object
      properties:
        name:
          type: string
        action:
          type: string
